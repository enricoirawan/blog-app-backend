// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "linux-arm64-openssl-3.0.x"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String        @unique
  fullname     String
  username     String
  password     String
  avatar       String?
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @default(now()) @map("updated_at")
  post         Post[]
  post_comment PostComment[]
}

model Post {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user         User          @relation(fields: [userId], references: [id])
  post_comment PostComment[]
}

model PostComment {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  postId     String   @map("post_id") @db.Uuid
  userId     String   @map("user_id") @db.Uuid
  comment    String
  created_at DateTime @default(now()) @map("createdAt")

  post Post @relation(fields: [postId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@map("post_comment")
}
